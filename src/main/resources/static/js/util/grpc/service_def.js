// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var StatusParams = exports.StatusParams = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var SubForm = exports.SubForm = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var HardAndStroage = exports.HardAndStroage = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Cameras = exports.Cameras = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var DeviceStatus = exports.DeviceStatus = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var DeviceStatusList = exports.DeviceStatusList = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineStatusParams()
defineSubForm()
defineHardAndStroage()
defineCameras()
defineDeviceStatus()
defineDeviceStatusList()

function defineStatusParams () {
  StatusParams.encodingLength = encodingLength
  StatusParams.encode = encode
  StatusParams.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.deviceId)) {
      var len = encodings.string.encodingLength(obj.deviceId)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.deviceId)) {
      buf[offset++] = 10
      encodings.string.encode(obj.deviceId, buf, offset)
      offset += encodings.string.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      deviceId: ""
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.deviceId = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineSubForm () {
  SubForm.encodingLength = encodingLength
  SubForm.encode = encode
  SubForm.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.a)) {
      var len = encodings.int32.encodingLength(obj.a)
      length += 1 + len
    }
    if (defined(obj.b)) {
      var len = encodings.int32.encodingLength(obj.b)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.a)) {
      buf[offset++] = 0
      encodings.int32.encode(obj.a, buf, offset)
      offset += encodings.int32.encode.bytes
    }
    if (defined(obj.b)) {
      buf[offset++] = 8
      encodings.int32.encode(obj.b, buf, offset)
      offset += encodings.int32.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      a: 0,
      b: 0
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 0:
        obj.a = encodings.int32.decode(buf, offset)
        offset += encodings.int32.decode.bytes
        break
        case 1:
        obj.b = encodings.int32.decode(buf, offset)
        offset += encodings.int32.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineHardAndStroage () {
  HardAndStroage.encodingLength = encodingLength
  HardAndStroage.encode = encode
  HardAndStroage.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.Path)) {
      var len = encodings.string.encodingLength(obj.Path)
      length += 1 + len
    }
    if (defined(obj.Temp)) {
      var len = encodings.int32.encodingLength(obj.Temp)
      length += 1 + len
    }
    if (defined(obj.Type)) {
      var len = encodings.string.encodingLength(obj.Type)
      length += 1 + len
    }
    if (defined(obj.Status)) {
      var len = encodings.string.encodingLength(obj.Status)
      length += 1 + len
    }
    if (defined(obj.Rebuild)) {
      var len = encodings.bool.encodingLength(obj.Rebuild)
      length += 1 + len
    }
    if (defined(obj.DiskFree)) {
      var len = encodings.string.encodingLength(obj.DiskFree)
      length += 1 + len
    }
    if (defined(obj.DiskTotal)) {
      var len = encodings.string.encodingLength(obj.DiskTotal)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.Path)) {
      buf[offset++] = 2
      encodings.string.encode(obj.Path, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.Temp)) {
      buf[offset++] = 8
      encodings.int32.encode(obj.Temp, buf, offset)
      offset += encodings.int32.encode.bytes
    }
    if (defined(obj.Type)) {
      buf[offset++] = 18
      encodings.string.encode(obj.Type, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.Status)) {
      buf[offset++] = 26
      encodings.string.encode(obj.Status, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.Rebuild)) {
      buf[offset++] = 32
      encodings.bool.encode(obj.Rebuild, buf, offset)
      offset += encodings.bool.encode.bytes
    }
    if (defined(obj.DiskFree)) {
      buf[offset++] = 42
      encodings.string.encode(obj.DiskFree, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.DiskTotal)) {
      buf[offset++] = 50
      encodings.string.encode(obj.DiskTotal, buf, offset)
      offset += encodings.string.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      Path: "",
      Temp: 0,
      Type: "",
      Status: "",
      Rebuild: false,
      DiskFree: "",
      DiskTotal: ""
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 0:
        obj.Path = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 1:
        obj.Temp = encodings.int32.decode(buf, offset)
        offset += encodings.int32.decode.bytes
        break
        case 2:
        obj.Type = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 3:
        obj.Status = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 4:
        obj.Rebuild = encodings.bool.decode(buf, offset)
        offset += encodings.bool.decode.bytes
        break
        case 5:
        obj.DiskFree = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 6:
        obj.DiskTotal = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineCameras () {
  Cameras.encodingLength = encodingLength
  Cameras.encode = encode
  Cameras.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.Name)) {
      var len = encodings.string.encodingLength(obj.Name)
      length += 1 + len
    }
    if (defined(obj.Bps)) {
      var len = encodings.string.encodingLength(obj.Bps)
      length += 1 + len
    }
    if (defined(obj.Fps)) {
      var len = encodings.int32.encodingLength(obj.Fps)
      length += 1 + len
    }
    if (defined(obj.Rec)) {
      var len = encodings.string.encodingLength(obj.Rec)
      length += 1 + len
    }
    if (defined(obj.Url)) {
      var len = encodings.string.encodingLength(obj.Url)
      length += 1 + len
    }
    if (defined(obj.Uuid)) {
      var len = encodings.string.encodingLength(obj.Uuid)
      length += 1 + len
    }
    if (defined(obj.RecTo)) {
      var len = encodings.string.encodingLength(obj.RecTo)
      length += 1 + len
    }
    if (defined(obj.Active)) {
      var len = encodings.bool.encodingLength(obj.Active)
      length += 1 + len
    }
    if (defined(obj.RecBad)) {
      var len = encodings.bool.encodingLength(obj.RecBad)
      length += 1 + len
    }
    if (defined(obj.StgBad)) {
      var len = encodings.bool.encodingLength(obj.StgBad)
      length += 1 + len
    }
    if (defined(obj.DevType)) {
      var len = encodings.string.encodingLength(obj.DevType)
      length += 1 + len
    }
    if (defined(obj.RecDays)) {
      var len = encodings.int32.encodingLength(obj.RecDays)
      length += 1 + len
    }
    if (defined(obj.RecFrom)) {
      var len = encodings.string.encodingLength(obj.RecFrom)
      length += 1 + len
    }
    if (defined(obj.NetError)) {
      var len = encodings.int32.encodingLength(obj.NetError)
      length += 1 + len
    }
    if (defined(obj.MaxRecDays)) {
      var len = encodings.int32.encodingLength(obj.MaxRecDays)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.Name)) {
      buf[offset++] = 2
      encodings.string.encode(obj.Name, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.Bps)) {
      buf[offset++] = 10
      encodings.string.encode(obj.Bps, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.Fps)) {
      buf[offset++] = 16
      encodings.int32.encode(obj.Fps, buf, offset)
      offset += encodings.int32.encode.bytes
    }
    if (defined(obj.Rec)) {
      buf[offset++] = 26
      encodings.string.encode(obj.Rec, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.Url)) {
      buf[offset++] = 34
      encodings.string.encode(obj.Url, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.Uuid)) {
      buf[offset++] = 42
      encodings.string.encode(obj.Uuid, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.RecTo)) {
      buf[offset++] = 50
      encodings.string.encode(obj.RecTo, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.Active)) {
      buf[offset++] = 56
      encodings.bool.encode(obj.Active, buf, offset)
      offset += encodings.bool.encode.bytes
    }
    if (defined(obj.RecBad)) {
      buf[offset++] = 64
      encodings.bool.encode(obj.RecBad, buf, offset)
      offset += encodings.bool.encode.bytes
    }
    if (defined(obj.StgBad)) {
      buf[offset++] = 72
      encodings.bool.encode(obj.StgBad, buf, offset)
      offset += encodings.bool.encode.bytes
    }
    if (defined(obj.DevType)) {
      buf[offset++] = 82
      encodings.string.encode(obj.DevType, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.RecDays)) {
      buf[offset++] = 88
      encodings.int32.encode(obj.RecDays, buf, offset)
      offset += encodings.int32.encode.bytes
    }
    if (defined(obj.RecFrom)) {
      buf[offset++] = 98
      encodings.string.encode(obj.RecFrom, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.NetError)) {
      buf[offset++] = 104
      encodings.int32.encode(obj.NetError, buf, offset)
      offset += encodings.int32.encode.bytes
    }
    if (defined(obj.MaxRecDays)) {
      buf[offset++] = 112
      encodings.int32.encode(obj.MaxRecDays, buf, offset)
      offset += encodings.int32.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      Name: "",
      Bps: "",
      Fps: 0,
      Rec: "",
      Url: "",
      Uuid: "",
      RecTo: "",
      Active: false,
      RecBad: false,
      StgBad: false,
      DevType: "",
      RecDays: 0,
      RecFrom: "",
      NetError: 0,
      MaxRecDays: 0
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 0:
        obj.Name = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 1:
        obj.Bps = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 2:
        obj.Fps = encodings.int32.decode(buf, offset)
        offset += encodings.int32.decode.bytes
        break
        case 3:
        obj.Rec = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 4:
        obj.Url = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 5:
        obj.Uuid = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 6:
        obj.RecTo = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 7:
        obj.Active = encodings.bool.decode(buf, offset)
        offset += encodings.bool.decode.bytes
        break
        case 8:
        obj.RecBad = encodings.bool.decode(buf, offset)
        offset += encodings.bool.decode.bytes
        break
        case 9:
        obj.StgBad = encodings.bool.decode(buf, offset)
        offset += encodings.bool.decode.bytes
        break
        case 10:
        obj.DevType = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 11:
        obj.RecDays = encodings.int32.decode(buf, offset)
        offset += encodings.int32.decode.bytes
        break
        case 12:
        obj.RecFrom = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 13:
        obj.NetError = encodings.int32.decode(buf, offset)
        offset += encodings.int32.decode.bytes
        break
        case 14:
        obj.MaxRecDays = encodings.int32.decode(buf, offset)
        offset += encodings.int32.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineDeviceStatus () {
  DeviceStatus.encodingLength = encodingLength
  DeviceStatus.encode = encode
  DeviceStatus.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.devicePid)) {
      var len = encodings.int32.encodingLength(obj.devicePid)
      length += 1 + len
    }
    if (defined(obj.deviceId)) {
      var len = encodings.int32.encodingLength(obj.deviceId)
      length += 1 + len
    }
    if (defined(obj.brName)) {
      var len = encodings.string.encodingLength(obj.brName)
      length += 1 + len
    }
    if (defined(obj.deviceUuid)) {
      var len = encodings.string.encodingLength(obj.deviceUuid)
      length += 1 + len
    }
    if (defined(obj.deviceNetAddr)) {
      var len = encodings.string.encodingLength(obj.deviceNetAddr)
      length += 1 + len
    }
    if (defined(obj.deviceName)) {
      var len = encodings.string.encodingLength(obj.deviceName)
      length += 1 + len
    }
    if (defined(obj.cameraCnt)) {
      var len = encodings.string.encodingLength(obj.cameraCnt)
      length += 1 + len
    }
    if (defined(obj.hcId)) {
      var len = encodings.string.encodingLength(obj.hcId)
      length += 1 + len
    }
    if (defined(obj.hcDeviceType)) {
      var len = encodings.string.encodingLength(obj.hcDeviceType)
      length += 1 + len
    }
    if (defined(obj.hcVersion)) {
      var len = encodings.string.encodingLength(obj.hcVersion)
      length += 1 + len
    }
    if (defined(obj.hcRecordStime)) {
      var len = encodings.string.encodingLength(obj.hcRecordStime)
      length += 1 + len
    }
    if (defined(obj.hcRecordEtime)) {
      var len = encodings.string.encodingLength(obj.hcRecordEtime)
      length += 1 + len
    }
    if (defined(obj.hcRecordDays)) {
      var len = encodings.int32.encodingLength(obj.hcRecordDays)
      length += 1 + len
    }
    if (defined(obj.hcRecordingStatus)) {
      var len = encodings.string.encodingLength(obj.hcRecordingStatus)
      length += 1 + len
    }
    if (defined(obj.hcCpuUsage)) {
      var len = encodings.string.encodingLength(obj.hcCpuUsage)
      length += 1 + len
    }
    if (defined(obj.hcAvailableMem)) {
      var len = encodings.string.encodingLength(obj.hcAvailableMem)
      length += 1 + len
    }
    if (defined(obj.hcTotalMem)) {
      var len = encodings.string.encodingLength(obj.hcTotalMem)
      length += 2 + len
    }
    if (defined(obj.hcPower)) {
      var len = encodings.string.encodingLength(obj.hcPower)
      length += 2 + len
    }
    if (defined(obj.hcCameras)) {
      for (var i = 0; i < obj.hcCameras.length; i++) {
        if (!defined(obj.hcCameras[i])) continue
        var len = Cameras.encodingLength(obj.hcCameras[i])
        length += varint.encodingLength(len)
        length += 2 + len
      }
    }
    if (defined(obj.hcStorages)) {
      for (var i = 0; i < obj.hcStorages.length; i++) {
        if (!defined(obj.hcStorages[i])) continue
        var len = HardAndStroage.encodingLength(obj.hcStorages[i])
        length += varint.encodingLength(len)
        length += 2 + len
      }
    }
    if (defined(obj.hcDisk)) {
      var len = HardAndStroage.encodingLength(obj.hcDisk)
      length += varint.encodingLength(len)
      length += 2 + len
    }
    if (defined(obj.hcErDt)) {
      var len = encodings.string.encodingLength(obj.hcErDt)
      length += 2 + len
    }
    if (defined(obj.hcSuccess)) {
      var len = encodings.bool.encodingLength(obj.hcSuccess)
      length += 2 + len
    }
    if (defined(obj.hcRdt)) {
      var len = encodings.string.encodingLength(obj.hcRdt)
      length += 2 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.devicePid)) {
      buf[offset++] = 0
      encodings.int32.encode(obj.devicePid, buf, offset)
      offset += encodings.int32.encode.bytes
    }
    if (defined(obj.deviceId)) {
      buf[offset++] = 8
      encodings.int32.encode(obj.deviceId, buf, offset)
      offset += encodings.int32.encode.bytes
    }
    if (defined(obj.brName)) {
      buf[offset++] = 18
      encodings.string.encode(obj.brName, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.deviceUuid)) {
      buf[offset++] = 26
      encodings.string.encode(obj.deviceUuid, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.deviceNetAddr)) {
      buf[offset++] = 34
      encodings.string.encode(obj.deviceNetAddr, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.deviceName)) {
      buf[offset++] = 42
      encodings.string.encode(obj.deviceName, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.cameraCnt)) {
      buf[offset++] = 50
      encodings.string.encode(obj.cameraCnt, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.hcId)) {
      buf[offset++] = 58
      encodings.string.encode(obj.hcId, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.hcDeviceType)) {
      buf[offset++] = 66
      encodings.string.encode(obj.hcDeviceType, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.hcVersion)) {
      buf[offset++] = 74
      encodings.string.encode(obj.hcVersion, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.hcRecordStime)) {
      buf[offset++] = 82
      encodings.string.encode(obj.hcRecordStime, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.hcRecordEtime)) {
      buf[offset++] = 90
      encodings.string.encode(obj.hcRecordEtime, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.hcRecordDays)) {
      buf[offset++] = 96
      encodings.int32.encode(obj.hcRecordDays, buf, offset)
      offset += encodings.int32.encode.bytes
    }
    if (defined(obj.hcRecordingStatus)) {
      buf[offset++] = 106
      encodings.string.encode(obj.hcRecordingStatus, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.hcCpuUsage)) {
      buf[offset++] = 114
      encodings.string.encode(obj.hcCpuUsage, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.hcAvailableMem)) {
      buf[offset++] = 122
      encodings.string.encode(obj.hcAvailableMem, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.hcTotalMem)) {
      buf[offset++] = 130
      buf[offset++] = 1
      encodings.string.encode(obj.hcTotalMem, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.hcPower)) {
      buf[offset++] = 138
      buf[offset++] = 1
      encodings.string.encode(obj.hcPower, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.hcCameras)) {
      for (var i = 0; i < obj.hcCameras.length; i++) {
        if (!defined(obj.hcCameras[i])) continue
        buf[offset++] = 146
        buf[offset++] = 1
        varint.encode(Cameras.encodingLength(obj.hcCameras[i]), buf, offset)
        offset += varint.encode.bytes
        Cameras.encode(obj.hcCameras[i], buf, offset)
        offset += Cameras.encode.bytes
      }
    }
    if (defined(obj.hcStorages)) {
      for (var i = 0; i < obj.hcStorages.length; i++) {
        if (!defined(obj.hcStorages[i])) continue
        buf[offset++] = 154
        buf[offset++] = 1
        varint.encode(HardAndStroage.encodingLength(obj.hcStorages[i]), buf, offset)
        offset += varint.encode.bytes
        HardAndStroage.encode(obj.hcStorages[i], buf, offset)
        offset += HardAndStroage.encode.bytes
      }
    }
    if (defined(obj.hcDisk)) {
      buf[offset++] = 162
      buf[offset++] = 1
      varint.encode(HardAndStroage.encodingLength(obj.hcDisk), buf, offset)
      offset += varint.encode.bytes
      HardAndStroage.encode(obj.hcDisk, buf, offset)
      offset += HardAndStroage.encode.bytes
    }
    if (defined(obj.hcErDt)) {
      buf[offset++] = 170
      buf[offset++] = 1
      encodings.string.encode(obj.hcErDt, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.hcSuccess)) {
      buf[offset++] = 176
      buf[offset++] = 1
      encodings.bool.encode(obj.hcSuccess, buf, offset)
      offset += encodings.bool.encode.bytes
    }
    if (defined(obj.hcRdt)) {
      buf[offset++] = 186
      buf[offset++] = 1
      encodings.string.encode(obj.hcRdt, buf, offset)
      offset += encodings.string.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      devicePid: 0,
      deviceId: 0,
      brName: "",
      deviceUuid: "",
      deviceNetAddr: "",
      deviceName: "",
      cameraCnt: "",
      hcId: "",
      hcDeviceType: "",
      hcVersion: "",
      hcRecordStime: "",
      hcRecordEtime: "",
      hcRecordDays: 0,
      hcRecordingStatus: "",
      hcCpuUsage: "",
      hcAvailableMem: "",
      hcTotalMem: "",
      hcPower: "",
      hcCameras: [],
      hcStorages: [],
      hcDisk: null,
      hcErDt: "",
      hcSuccess: false,
      hcRdt: ""
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 0:
        obj.devicePid = encodings.int32.decode(buf, offset)
        offset += encodings.int32.decode.bytes
        break
        case 1:
        obj.deviceId = encodings.int32.decode(buf, offset)
        offset += encodings.int32.decode.bytes
        break
        case 2:
        obj.brName = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 3:
        obj.deviceUuid = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 4:
        obj.deviceNetAddr = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 5:
        obj.deviceName = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 6:
        obj.cameraCnt = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 7:
        obj.hcId = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 8:
        obj.hcDeviceType = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 9:
        obj.hcVersion = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 10:
        obj.hcRecordStime = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 11:
        obj.hcRecordEtime = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 12:
        obj.hcRecordDays = encodings.int32.decode(buf, offset)
        offset += encodings.int32.decode.bytes
        break
        case 13:
        obj.hcRecordingStatus = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 14:
        obj.hcCpuUsage = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 15:
        obj.hcAvailableMem = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 16:
        obj.hcTotalMem = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 17:
        obj.hcPower = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 18:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.hcCameras.push(Cameras.decode(buf, offset, offset + len))
        offset += Cameras.decode.bytes
        break
        case 19:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.hcStorages.push(HardAndStroage.decode(buf, offset, offset + len))
        offset += HardAndStroage.decode.bytes
        break
        case 20:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.hcDisk = HardAndStroage.decode(buf, offset, offset + len)
        offset += HardAndStroage.decode.bytes
        break
        case 21:
        obj.hcErDt = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 22:
        obj.hcSuccess = encodings.bool.decode(buf, offset)
        offset += encodings.bool.decode.bytes
        break
        case 23:
        obj.hcRdt = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineDeviceStatusList () {
  DeviceStatusList.encodingLength = encodingLength
  DeviceStatusList.encode = encode
  DeviceStatusList.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.list)) {
      for (var i = 0; i < obj.list.length; i++) {
        if (!defined(obj.list[i])) continue
        var len = DeviceStatus.encodingLength(obj.list[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.list)) {
      for (var i = 0; i < obj.list.length; i++) {
        if (!defined(obj.list[i])) continue
        buf[offset++] = 2
        varint.encode(DeviceStatus.encodingLength(obj.list[i]), buf, offset)
        offset += varint.encode.bytes
        DeviceStatus.encode(obj.list[i], buf, offset)
        offset += DeviceStatus.encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      list: []
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 0:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.list.push(DeviceStatus.decode(buf, offset, offset + len))
        offset += DeviceStatus.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
